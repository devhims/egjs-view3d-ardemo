[{"/Users/himanshu/codeacademy/egjs-view3d-demo/src/index.js":"1","/Users/himanshu/codeacademy/egjs-view3d-demo/src/App.js":"2","/Users/himanshu/codeacademy/egjs-view3d-demo/src/reportWebVitals.js":"3","/Users/himanshu/codeacademy/egjs-view3d-demo/src/view3dtest.js":"4","/Users/himanshu/codeacademy/egjs-view3d-demo/src/newdemo.js":"5"},{"size":500,"mtime":1610784817657,"results":"6","hashOfConfig":"7"},{"size":189,"mtime":1610788133288,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610784817659,"results":"9","hashOfConfig":"7"},{"size":4320,"mtime":1610815660984,"results":"10","hashOfConfig":"7"},{"size":3294,"mtime":1610787080404,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1pgm547",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/himanshu/codeacademy/egjs-view3d-demo/src/index.js",[],["25","26"],"/Users/himanshu/codeacademy/egjs-view3d-demo/src/App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport WebARTest from './view3dtest';\n//import NewDemo from './newdemo';\n\nfunction App() {\n  return <WebARTest />;\n}\n\nexport default App;\n","/Users/himanshu/codeacademy/egjs-view3d-demo/src/reportWebVitals.js",[],"/Users/himanshu/codeacademy/egjs-view3d-demo/src/view3dtest.js",["28","29","30"],"import View3D, {\n  AutoDirectionalLight,\n  ShadowPlane,\n  SimpleLights,\n  GLTFLoader,\n  THREE,\n  RotateControl,\n  DistanceControl,\n  FloorARSession,\n} from '@egjs/view3d';\nimport React, { useRef, useEffect } from 'react';\nimport './viewstyles.css';\n// import './common.css';\nimport './ar.css';\n// import './prism.css';\n// import spec from './assets/specstand.glb';\n//import spec from './assets/animated_dragon/scene.gltf';\n// import spec from './assets/dragon.glb';\n//import spec from '../p assets/NormalChair.glb';\n\nconst WebARTest = () => {\n  const canvasElement = useRef(null);\n  const overlayElement = useRef(null);\n  let view3d;\n\n  const handleClick = async () => {\n    view3d.xr.enter().catch((err) => {\n      alert(err);\n      console.error(err);\n    });\n  };\n\n  const handleClose = () => {\n    view3d.xr.exit();\n  };\n\n  useEffect(() => {\n    view3d = new View3D(canvasElement.current);\n\n    const threeRenderer = view3d.renderer.threeRenderer;\n    threeRenderer.physicallyCorrectLights = true;\n\n    view3d.controller.add(new RotateControl());\n    view3d.controller.add(new DistanceControl());\n\n    const light1 = new THREE.DirectionalLight('#fff', 0.7);\n    const light2 = new THREE.HemisphereLight('#fff', '#fff', 0.7);\n    const light3 = new THREE.DirectionalLight('#fff', 0.7);\n    const ambient = new THREE.AmbientLight('#fff', 0.3);\n    const light = new AutoDirectionalLight();\n\n    light.position.set(0, 5, 4);\n    view3d.scene.addEnv(light);\n\n    light1.position.set(0, 50, 40);\n    light2.position.set(0, 50, 0);\n    light3.position.set(0, 50, -40);\n\n    view3d.scene.addEnv(light1, light2, light3, ambient);\n\n    const shadowPlane = new ShadowPlane();\n    view3d.scene.addEnv(shadowPlane);\n\n    const loader = new GLTFLoader();\n    loader\n      .load('/assets/animated_dragon/scene.gltf')\n      .then((model) => {\n        model.castShadow = true;\n        model.receiveShadow = true;\n        view3d.display(model, {\n          size: 140,\n        });\n        view3d.animator.play(0);\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n\n    const floorSession = new FloorARSession({\n      overlayRoot: overlayElement,\n      loadingEl: '#loading',\n      forceOverlay: true,\n    })\n      .on('start', () => {\n        overlayElement.style.display = 'flex';\n      })\n      .on('end', () => {\n        overlayElement.style.display = 'none';\n      });\n  }, [canvasElement]);\n\n  return (\n    <>\n      <div id=\"view3d-wrapper\">\n        <canvas id=\"ar-canvas\" ref={canvasElement}></canvas>\n        <div id=\"ar-button\" onClick={handleClick}>\n          <svg\n            id=\"ar-icon\"\n            viewBox=\"0 0 100 100\"\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M20 30 L 50 15 L 80 30 L 50 45 L 20 30 V 70 L 50 85 L 80 70 V 30 M 50 45 V 85\"\n              fill=\"transparent\"\n              strokeWidth=\"5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            ></path>\n          </svg>\n          <span>View in AR</span>\n        </div>\n      </div>\n      <div id=\"overlay\" ref={overlayElement}>\n        <div id=\"xr-close\" onClick={handleClose}>\n          <svg\n            id=\"close-icon\"\n            viewBox=\"0 0 24 24\"\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <line\n              x1=\"2\"\n              y1=\"22\"\n              x2=\"22\"\n              y2=\"2\"\n              stroke=\"white\"\n              strokeWidth=\"2\"\n            ></line>\n            <line\n              x1=\"2\"\n              y1=\"2\"\n              x2=\"22\"\n              y2=\"22\"\n              stroke=\"white\"\n              strokeWidth=\"2\"\n            ></line>\n          </svg>\n        </div>\n        <div id=\"loading\">\n          <div className=\"lds-spinner\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div>바닥면을 찾는 중입니다...</div>\n          <div>방 안을 밝게 해주시고 화면을 이리저리 움직여주세요</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default WebARTest;\n","/Users/himanshu/codeacademy/egjs-view3d-demo/src/newdemo.js",["31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":4,"column":3,"nodeType":"38","messageId":"39","endLine":4,"endColumn":15},{"ruleId":"41","severity":1,"message":"42","line":38,"column":14,"nodeType":"43","endLine":38,"endColumn":47},{"ruleId":"36","severity":1,"message":"44","line":79,"column":11,"nodeType":"38","messageId":"39","endLine":79,"endColumn":23},{"ruleId":"36","severity":1,"message":"45","line":1,"column":34,"nodeType":"38","messageId":"39","endLine":1,"endColumn":52},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'SimpleLights' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'view3d' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'floorSession' is assigned a value but never used.","'SceneViewerSession' is defined but never used.","no-global-assign","no-unsafe-negation"]